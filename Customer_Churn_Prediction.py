# -*- coding: utf-8 -*-
"""Customer Churn Prediction in Telecom .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-umy-RQXcVvCh7nnE4Doawj2Vw83yJ9Y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, adjusted_rand_score

from google.colab import drive
drive.mount('/content/drive')

file_path = "/content/drive/MyDrive/Dataset/telecom_customer_churnP.csv"
df = pd.read_csv(file_path)

print("Dataset Overview:")
print(df.head())
print(df.describe())

sns.countplot(x='Customer Status', data=df)
plt.show()

df = df.dropna()

label_columns = ['Gender', 'Married', 'City', 'Offer', 'Phone Service', 'Internet Service', 'Internet Type', 'Contract', 'Paperless Billing', 'Payment Method', 'Churn Category', 'Churn Reason']
label_encoder = LabelEncoder()

for column in label_columns:
    df[column] = label_encoder.fit_transform(df[column])

scaler = StandardScaler()
numerical_features = ['Age', 'Number of Dependents', 'Latitude', 'Longitude', 'Number of Referrals', 'Tenure in Months', 'Avg Monthly Long Distance Charges', 'Avg Monthly GB Download', 'Monthly Charge', 'Total Charges', 'Total Refunds', 'Total Extra Data Charges', 'Total Long Distance Charges', 'Total Revenue']

df[numerical_features] = scaler.fit_transform(df[numerical_features])

df['Customer Status'] = label_encoder.fit_transform(df['Customer Status'])

X = df.drop(['Customer Status', 'Churn Category', 'Churn Reason'], axis=1)
y = df['Customer Status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

mlp_model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=1000)
mlp_model.fit(X_train, y_train)
mlp_predictions = mlp_model.predict(X_test)
mlp_accuracy = accuracy_score(y_test, mlp_predictions)
print(f'Neural Network Accuracy: {mlp_accuracy}')

models_names = ['Neural Network']
models_accuracies = [mlp_accuracy]

plt.figure(figsize=(2, 4))
sns.barplot(x=models_names, y=models_accuracies, palette="viridis")
plt.title('Model Accuracies')
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.show()

naive_bayes_model = GaussianNB()
naive_bayes_model.fit(X_train, y_train)
naive_bayes_predictions = naive_bayes_model.predict(X_test)
naive_bayes_accuracy = accuracy_score(y_test, naive_bayes_predictions)
print(f'Naive Bayes Accuracy: {naive_bayes_accuracy}')

models_names = ['Naive Bayes']
models_accuracies = [naive_bayes_accuracy]

plt.figure(figsize=(2, 4))
sns.barplot(x=models_names, y=models_accuracies, palette="viridis")
plt.title('Model Accuracies')
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.show()

file_path = "/content/drive/MyDrive/Dataset/telecom_customer_churnP.csv"
df = pd.read_csv(file_path)

df = df.drop(['Customer ID', 'City', 'Zip Code', 'Churn Category', 'Churn Reason'], axis=1)
df = df.dropna()

label_columns = ['Gender', 'Married', 'Offer', 'Phone Service', 'Internet Service', 'Internet Type', 'Contract', 'Paperless Billing', 'Payment Method', 'Customer Status']
label_encoder = LabelEncoder()

for column in label_columns:
    df[column] = label_encoder.fit_transform(df[column])

scaler = StandardScaler()
numerical_features = ['Age', 'Number of Dependents', 'Latitude', 'Longitude', 'Number of Referrals', 'Tenure in Months', 'Avg Monthly Long Distance Charges', 'Avg Monthly GB Download', 'Monthly Charge', 'Total Charges', 'Total Refunds', 'Total Extra Data Charges', 'Total Long Distance Charges', 'Total Revenue']
df[numerical_features] = scaler.fit_transform(df[numerical_features])

X = df.drop('Customer Status', axis=1)
y = df['Customer Status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

logistic_model = LogisticRegression()
logistic_model.fit(X_train, y_train)
logistic_predictions = logistic_model.predict(X_test)
logistic_accuracy = accuracy_score(y_test, logistic_predictions)
print(f'Logistic Regression Accuracy: {logistic_accuracy}')


models_names = ['LogisticRegression']
models_accuracies = [logistic_accuracy]

plt.figure(figsize=(2, 4))
sns.barplot(x=models_names, y=models_accuracies, palette="viridis")
plt.title('Model Accuracies')
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.show()